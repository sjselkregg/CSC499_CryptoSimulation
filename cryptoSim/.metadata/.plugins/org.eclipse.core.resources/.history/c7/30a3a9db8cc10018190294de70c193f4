/**
 * This class creates, and manages the population. Methods regarding operations in which every miner needs to 
 * complete at the same time are here. Information regarding the whole population is located here.
 * @author Sam Selkregg
 */
package cryptoSimulation;

import java.util.ArrayList;

public class Population 
{
	//ArrayLists storing the miner population
	private ArrayList<Miner> allMiners = new ArrayList<Miner>();
	private ArrayList<Miner> participating = new ArrayList<Miner>();
	private ArrayList<Miner> nonParticipating = new ArrayList<Miner>();
	
	//how many miners belong to each pool
	private int[] poolQuantities = new int[21];
	
	//the value of the monitored cryptocurrency, and what it was.
	public int cryptoValue = 6733;
	public int prevCV = 6733;
	
	/**
	 * Creates a population of miners
	 * @param howMany how many miners there are to create
	 */
	public void create(int howMany)
	{
		for(int minerID = 0; minerID < (howMany - 1); minerID++)
		{
			allMiners.add(new Miner(minerID));
		}
		updateLists();
	}
	
	
	/**
	 * Updates Active and nonActive lists
	 */
	public void updateLists() {
		participating.clear();
		nonParticipating.clear();
		for(int i = 0; i<allMiners.size(); i++)
		{
			if(allMiners.get(i).getStatus() == true)
			{
				participating.add(allMiners.get(i));
				//increment pool quantities
				poolQuantities[allMiners.get(i).getPool()]++;
			}else
			{
				nonParticipating.add(allMiners.get(i));
			}
			
		}
	}
	
	/**
	 * Tells the entire population to evaluate itself at the current situation,
	 * and make intelligent decisions based on your status.
	 */
	public void totalEvaluation()
	{
		for(int i = 0; i < allMiners.size(); i++)
		{
			distributeRewards();
			allMiners.get(i).evaluateSituation();
			updateLists();
			
		}
	}
	
	/**
	 * Distributes the reward to the selected winners.
	 */
	public void distributeRewards()
	{
		int winner = (int)(Math.random() * participating.size());
		int winningPool = participating.get(winner).getPool();
		if(winningPool != 0)
		{
			double individualReward = 25 / poolQuantities[participating.get(winner).getPool()];
		
			for(int i = 0;i<participating.size();i++)
			{
				int currentPool = participating.get(i).getPool();
				if(currentPool == winningPool)
				{
					participating.get(i).updateCoins(individualReward, cryptoValue);
				}
			}
		} else
		{
			participating.get(winner).updateCoins(25, cryptoValue);
		}
		
		
	}
	
	
	/**
	 * Updates the value of the currency
	 */
	public void updateValue()
	{
		//bitcoin range of values for the past year: roughly 4000-19000
		//create range of random numbers
		int r = (int)(Math.random() * 3000 + 1);
		//use this range to determine if the value should go up or down
		//if the result lies between 0-2000, keep on the same trend, else, the value will travel the opposite way
		//then determine how much you wanna change ur value by
		//bitcoin seemed to change 1000 a day at the highest days, should normally be between 50 and 200
	}
	
	
	
	public void 
}
