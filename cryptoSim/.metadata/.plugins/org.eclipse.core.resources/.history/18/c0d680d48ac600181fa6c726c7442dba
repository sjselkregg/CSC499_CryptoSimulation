/**
 * Miner class, responsible for one individual miner's information, and methods. 
 */
package cryptoSimulation;

public class Miner 
{
	/**
	 * Cost is different for each miner, most miners should possess costs that are
	 * similar to those who mine in popular mining areas. Costs can range from 
	 * $531 to $26170
	 */
	public int cost;
	public double individualCost;
	
	//holds a reference to the population
	private Population population;
	
	//wealth in USD
	public double wealth;
	public double startWealth;
	public double coinsWon = 0;
	private int roundsSinceWon = 0;
	
	//how likely a miner is to join/leave a network
	private double changeProbability = 0;
	
	//miners participation status
	public boolean participating = true;
	public int minerID;
	private int roundsParticipating = 0;
	private int roundsIdle = 0;
	private int numJoins = 0;
	private int numLeaves = 0;
	
	//miner pool info
	//0 for none...pools go from 1 to 20
	public int pool;
	
	
	public Miner(int iD)
	{
		minerID = iD;
		
		//calculate cost
		int r = (int)(Math.random() * 100 + 1);
		if(r < 25)
		{
			cost = 530;
		}else if((r < 50)&&(r >= 25))
		{
			cost = 2250;
		}else if((r < 75)&&(r >=50))
		{
			cost = 4750;
		}else if((r < 90)&&(r>=75))
		{
			cost = 7750;
		}else
		{
			cost = 11215;
		}
		
		//calculate wealth
		int x = (int)(Math.random() * 100 + 1);
		if(x <= 25)
		{
			wealth = (int)(Math.random() * 50000 + 30000);
		}else if((x <= 87)&&(x>25))
		{
			wealth = (int)(Math.random() * 150000 + 50000);
		}else
		{
			wealth = (int)(Math.random() * 500000 + 150000);
		}
		startWealth = wealth;
		
		//place in mining pool
		if(iD<=50000)
		{
			//half of population placed in most popular mining pools
			pool = (int)(Math.random() * 5 + 1);
		}else if((iD<=98000)&&(iD>50000))
		{
			//the other half split among less popular pools
			pool = (int)(Math.random() * 20 + 1);
		}else
		{
			//about 2% of the population are on their own
			pool = 0;
			//only someone very wealthy could solo mine
			wealth = 500000;
		}
		
	}
	
	/**
	 * Allows miners to view data held by the same population
	 * @param p the population of interest
	 */
	public void setPopulation(Population p)
	{
		population = p;
	}
	
	/**
	 * Updates the value of a miner's owned coins, and his wealth depending on these coins.
	 * @param value : the value to update the coins with.
	 * used by distribute rewards
	 */
	public void updateCoins(double reward, int val)
	{
		coinsWon = coinsWon + reward;
		
		int change = (int)(val * reward);
		wealth = wealth + change;
		roundsSinceWon = (-1);
	}
	
	/*
	
	public void changeStatus()
	{
		if(participating == true)
		{
			participating = false;
			numLeaves++;
			changeProbability = 0;
		}else if(participating!=true)
		{
			participating = true;
			if(numJoins>0)
			{
				changeProbability = .15;
			}else
			{
				changeProbability = 0;
			}
			numJoins++;
		}
	}
	*/
	
	public void leave()
	{
		participating = false;
		numLeaves++;
		changeProbability = 0;
	}
	
	public void join()
	{
		participating = true;
		numJoins++;
		changeProbability = 0;
	}
	
	
	/**
	 * @return the current activity status of the miner.
	 */
	public boolean getStatus()
	{
		return participating;
	}
	
	
	/**
	 * @return the pool this miner belongs to
	 */
	public int getPool()
	{
		return pool;
	}
	
	
	/**
	 * Reacts to a signal call 
	 */
	public void evaluateSituation()
	{
		if(participating == true)
		{
			if(calculateLeaveDecision()==true)
			{
				leave();
				updatePoolValue(population.getPoolQuantities(), -1);
			}
		}else
		{
			if(calculateJoinDecision()==true)
			{
				join();
				updatePoolValue(population.getPoolQuantities(), 1);
			}
		}
	}
	
	
	/**
	 * Uses series of conditionals to modify the changeProbability regarding participation
	 * status. Will then determine based on this probability if it will join or leave.
	 * @return leave  ...true if a miner will leave a network, false if not
	 */
	private boolean calculateLeaveDecision()
	{
		
		//every week a miner does not win, add to change probability
		if(roundsSinceWon%1008==0)
		{
			if(startWealth>wealth)
			{
				changeProbability = changeProbability + .1;
			}else
			{
				changeProbability = changeProbability + 0.015;
			}
			if(coinsWon==0)
			{
				changeProbability = changeProbability + .15;
			}
		}
		
		//probability of leaving decreases by a significant amount if a miner is a part of a win.
		if((roundsSinceWon==0)&&((changeProbability - 1)>0))
		{
			changeProbability = changeProbability - 1;
		}else if((roundsSinceWon==0)&&((changeProbability-1)<0))
		{
			changeProbability = 0;
		}
		
		int rValueChange = population.getRewardValue() - population.getPrevRewardValue();
		//changes in the reward's value in dollars effect on probability of change
		if(rValueChange>0)
		{
			if(rValueChange>=300)
			{
				if(changeProbability>.1)
				{
					changeProbability = changeProbability - .1;
				}else
				{
					changeProbability = 0;
				}
			}else if((rValueChange<300)&&(rValueChange>=100))
			{
				if(changeProbability>.05)
				{
					changeProbability = changeProbability - .05;
				}else
				{
					changeProbability = 0;
				}
			}else
			{
				if(changeProbability>.01)
				{
					changeProbability = changeProbability - .01;
				}else
				{
					changeProbability = 0;
				}
			}
		}else
		{
			if(rValueChange<=-300)
			{
				changeProbability = changeProbability + .1;
			}else if((rValueChange>-300)&&(rValueChange<=-100))
			{
				changeProbability = changeProbability + .05;
			}else
			{
				changeProbability = changeProbability + .01;
			}
		}
		
		//the likelihood of a miner leaving after 6 months of not winning is greatly increased
		if(roundsSinceWon>25000)
		{
			if(coinsWon==0)
			{
				//a miner will leave if nothing has been won after about 6 months
				return true;
			}else
			{
				changeProbability = changeProbability + 5;
			}
		}
		
		//calculate the decision
		changeProbability = changeProbability * 100;
		int k = (int)(Math.random() * 1000 + 1);
		boolean leave;
		if(k<=changeProbability)
		{
			leave = true;
		}else
		{
			leave = false;
			changeProbability = changeProbability/100;
		}
		return leave;
		
	}
	
	/**
	 * Uses several conditionals to modify the changeProbability regarding a miner's
	 * participation status. 
	 * @return join  ...true if a miner will join, false if not.
	 */
	private boolean calculateJoinDecision()
	{
		boolean join;
		int streak = population.getValueStreak();
		int rValueChange = population.getRewardValue() - population.getPrevRewardValue();
		
		if(rValueChange>0)
		{
			if(streak>=10)
			{
				changeProbability = changeProbability + .2;
			}else if((streak>=5)&&(streak<10))
			{
				changeProbability = changeProbability + .1;
			}else if((streak>=3)&&(streak<5))
			{
				changeProbability = changeProbability + .05;
			}
			
			if(rValueChange>=300)
			{
				changeProbability = changeProbability + .1;
			}else if((rValueChange<300)&&(rValueChange>=100))
			{
					changeProbability = changeProbability + .05;
			}else
			{
				changeProbability = changeProbability + .01;
			}
		}else
		{
			if(streak>=10)
			{
				changeProbability = changeProbability - .2;
			}else if((streak>=5)&&(streak<10))
			{
				changeProbability = changeProbability - .1;
			}else if((streak>=3)&&(streak<5))
			{
				changeProbability = changeProbability - .05;
			}
			
			if(rValueChange<=-300)
			{
				if(changeProbability>.1)
				{
					changeProbability = changeProbability - .1;
				}else
				{
					changeProbability = 0;
				}
			}else if((rValueChange>-300)&&(rValueChange<=-100))
			{
				if(changeProbability>.05)
				{
					changeProbability = changeProbability - .05;
				}else
				{
					changeProbability = 0;
				}
			}else
			{
				if(changeProbability>.01)
				{
					changeProbability = changeProbability - .01;
				}else
				{
					changeProbability = 0;
				}
			}
		}
		
		if(wealth>=250000)
		{
			changeProbability = changeProbability + .25;
		}else if((wealth<250000)&&(wealth>=100000))
		{
			changeProbability = changeProbability + .1;
		}else if((wealth<100000)&&(wealth>=50000))
		{
			changeProbability = changeProbability + .05;
		}else if((wealth<50000)&&(wealth>=15000))
		{
			if(changeProbability>.1)
			{
				changeProbability = changeProbability - .1;
			}else
			{
				changeProbability = 0;
			}
		}else
		{
			changeProbability = 0;
			join = false;
			return join;
		}
		
		
		//calculate the decision
		changeProbability = changeProbability * 100;
		int k = (int)(Math.random() * 1000 + 1);
		if(k<=changeProbability)
		{
			join = true;
		}else
		{
			join = false;
			changeProbability = changeProbability/100;
		}
		
		return join;
	}
	
	/**
	 * used by totalEvaluation
	 * @param myPoolSize how many people are in your pool
	 */
	public void roundChange(int myPoolSize)
	{
		if(minerID%100 == 0)
		{
			System.out.println();
			System.out.print(minerID);
			System.out.println("-------");
			System.out.print("Participation Status: ");
			System.out.println(participating);
			System.out.print("Rounds Since Won: ");
			System.out.println(roundsSinceWon);
			System.out.print("Populations Value of Currency: ");
			System.out.println(population.cryptoValue);
			System.out.print("Coins Won: ");
			System.out.println(coinsWon);
			System.out.print("Wealth: ");
			System.out.println(wealth);
			System.out.print("Start Wealth: ");
			System.out.println(startWealth);
			System.out.print("Change Probability: ");
			System.out.println(changeProbability);
			System.out.print("Rounds Participating: ");
			System.out.println(roundsParticipating);
			System.out.print("Rounds Idle: ");
			System.out.println(roundsIdle);
			System.out.print("Number of Joins: ");
			System.out.println(numJoins);
			System.out.print("Number of Leaves: ");
			System.out.println(numLeaves);
			System.out.println();
			
			
		}
		
		roundsSinceWon++;
		if(myPoolSize == 0)
		{
			wealth = wealth - cost;
		}else
		{
			individualCost = cost/myPoolSize;
			wealth = wealth - individualCost;
		}
		
		
		if(participating == true)
		{
			roundsParticipating++;
		} else
		{
			roundsIdle++;
		}
		
		evaluateSituation();
	}
	
	public void updatePoolValue(int[] pools, int change)
	{
		pools[pool]+=change;
	}
	
	
}
